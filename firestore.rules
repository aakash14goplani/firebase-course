rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth.uid !=null;
    }

    function isNonEmptyString(fieldName) {
      return request.resource.data[fieldName] is string
          && request.resource.data[fieldName].size() > 0;
    }

    function isValidCourse() {
      // request.resource.data -> data in user request
      // resource.data -> data already in firestore DB
      return request.resource.data.seqNo is number
          && request.resource.data.seqNo >= 0
          // && request.resource.data.lessonsCount is number
          // && request.resource.data.lessonsCount > 0
          && isNonEmptyString("url");

    }

    function isAdmin() {
      // declare variable in path -> {database}
      // use value of variable -> $(database)
      return isAuthenticated()
          && 'admin' in request.auth.token
          && request.auth.token.admin == true
          // && get( /databases/$(database)/documents/users/$(request.auth.uid) ).data.isAdmin == true;
    }

    function isKnownUser() {
      return isAuthenticated()
          && exists( /databases/$(database)/documents/users/$(request.auth.uid) );
    }

    match /users/{userId} {
      allow read, write: if false;
    }

    match /courses/{courseId} {
      allow read: if isKnownUser();
      // allow write: if isAdmin() && isValidCourse(); // && resource.data.status == 'draft';
      allow create, update: if isAdmin() && isValidCourse();
      allow delete: if isAdmin();

      match /lessons/{lessonId} {
        allow read: if isKnownUser();
        allow write: if isAdmin();
      }
    }

    // since it is a collection-group i.e. collection nested within collection, it needs special handling
    match /{path=**}/lessons/{lessonId} {
      allow read: if isKnownUser();
      allow write: if isAdmin();
    }
  }
}
